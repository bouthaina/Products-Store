
services:
  # Service PostgreSQL
  postgres:
    image: postgres:14
    container_name: product-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service Backend API
  backend:
    image: bouthainabakouch/image-backend-product
    container_name: product-api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
    
    ports:
      - "5001:8080"
    networks:
      - product-network

  # Service Frontend
  frontend:
    
    image: bouthainabakouch/image-frontend-product
    container_name: product-ui
    depends_on:
      - backend
    ports:
      - "5002:80"
    networks:
      - product-network
    environment:
      - API_URL=http://backend:8080 

# Volumes pour la persistance des données
volumes:
  postgres-data:
    name: product-postgres-data

# Réseau pour la communication entre les services
networks:
  product-network:
    name: product-network
    driver: bridge
