@page "/products"
@using ProductApp.Client.Models
@using ProductApp.Client.Services
@inject ProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Liste des produits</h1>

<p>
    <a href="/products/create" class="btn btn-primary">Créer un nouveau produit</a>
</p>

@if (products == null)
{
    <p><em>Chargement...</em></p>
}
else if (!products.Any())
{
    <p>Aucun produit trouvé. Commencez par en créer un !</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Prix</th>
                <th>Catégorie</th>
                <th>Stock</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Category</td>
                    <td>@product.StockQuantity</td>
                    <td>
                        <a href="/products/details/@product.Id" class="btn btn-info btn-sm">Détails</a>
                        <a href="/products/edit/@product.Id" class="btn btn-warning btn-sm">Modifier</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await ProductService.GetProductsAsync() ?? new List<Product>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des produits: {ex.Message}");
            // Gérer l'erreur (afficher un message, etc.)
        }
    }

    private async Task DeleteProduct(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Êtes-vous sûr de vouloir supprimer ce produit ?" }))
            return;

        try
        {
            await ProductService.DeleteProductAsync(id);
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression du produit: {ex.Message}");
            // Gérer l'erreur
        }
    }
}